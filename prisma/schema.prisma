// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  // firstName     String?
  // lastName      String
  password      String
  email         String       @unique
  emailVerified DateTime?
  application   Application?
  // phone         String
  //image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Application {
  id           Int    @id @default(autoincrement())
  counterparty String
  entityType   String
  regName      String
  //regDate      String
  regCountry   String
  regId        String
  regAddr      String
  bsnsAddr     String
  telephone    String
  website      String

  bankName  String
  bankAddr  String
  country   String
  accNum    String
  swiftCode String
  iban      String
  accBen    String
  userId    String            @unique
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     ApplicationFile[]
  status    String?
  comment   String?
  // createdAt DateTime?         @default(now())
  // updatedAt DateTime?         @updatedAt
  // status1 String
}

model ApplicationFile {
  id            Int         @id @default(autoincrement())
  url           String
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}
